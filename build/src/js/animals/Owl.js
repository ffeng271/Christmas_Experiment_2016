import Spline from '../libs/Spline';

class Owl  {
  constructor(pos){

    this.spline = new Spline([]);

    this.lines = [
      [[539, 708, 0],[552, 699, 0],[552, 690, 0],[538, 684, 0],[524, 672, 0],[518, 658, 0],[525, 647, 0],[536, 640, 0],[551, 632, 0],[569, 627, 0],[586, 613, 0],[591, 598, 0],[579, 582, 0],[561, 574, 0],[542, 567, 0],[529, 559, 0],[525, 547, 0],[532, 536, 0],[550, 523, 0],[564, 508, 0],[577, 489, 0],[585, 464, 0],[587, 433, 0],[583, 399, 0],[576, 392, 0],[565, 398, 0],[555, 412, 0],[542, 424, 0],[530, 419, 0],[525, 402, 0],[524, 383, 0],[527, 372, 0],[512, 381, 0],[496, 381, 0],[496, 374, 0],[499, 367, 0],[491, 365, 0],[484, 369, 0],[488, 374, 0],[482, 368, 0],[483, 362, 0],[482, 355, 0],[486, 351, 0],[494, 352, 0],[497, 354, 0],[501, 352, 0],[514, 367, 0],[530, 358, 0],[547, 356, 0],[558, 362, 0],[564, 359, 0],[567, 367, 0],[557, 374, 0],[559, 359, 0],[565, 358, 0],[568, 366, 0],[573, 370, 0],[565, 378, 0],[559, 378, 0],[561, 372, 0],[568, 366, 0],[574, 369, 0],[556, 387, 0],[546, 387, 0],[551, 377, 0],[554, 384, 0],[546, 384, 0],[553, 376, 0],[550, 368, 0],[546, 373, 0],[546, 362, 0],[555, 353, 0],[562, 357, 0],[567, 360, 0],[574, 356, 0],[580, 324, 0],[567, 274, 0],[537, 226, 0],[509, 184, 0],[490, 122, 0],[501, 75, 0],[527, 52, 0],[561, 24, 0],[570, 8, 0],[550, -6, 0],[515, -22, 0],[486, -42, 0],[488, -64, 0]],
      [[532, 701, 0],[519, 696, 0],[522, 684, 0],[533, 671, 0],[547, 655, 0],[566, 633, 0],[568, 610, 0],[542, 600, 0],[502, 598, 0],[489, 606, 0],[494, 613, 0],[524, 609, 0],[558, 590, 0],[561, 571, 0],[555, 548, 0],[534, 523, 0],[514, 496, 0],[502, 454, 0],[507, 424, 0],[518, 397, 0],[528, 380, 0],[523, 358, 0],[508, 334, 0],[501, 301, 0],[499, 281, 0],[502, 254, 0],[514, 238, 0],[533, 237, 0],[555, 248, 0],[559, 265, 0],[555, 283, 0],[541, 293, 0],[517, 296, 0],[499, 286, 0],[489, 264, 0],[486, 238, 0],[479, 218, 0],[457, 200, 0],[426, 184, 0],[387, 167, 0],[354, 154, 0],[332, 151, 0],[331, 154, 0],[338, 160, 0],[327, 155, 0],[319, 155, 0],[319, 161, 0],[331, 174, 0],[325, 178, 0],[325, 194, 0],[340, 237, 0],[361, 275, 0],[382, 302, 0],[411, 330, 0],[439, 348, 0],[490, 371, 0],[533, 384, 0],[577, 388, 0],[611, 380, 0],[633, 361, 0],[640, 334, 0],[638, 300, 0],[630, 268, 0],[615, 236, 0],[595, 209, 0],[574, 187, 0],[548, 167, 0],[528, 154, 0],[514, 143, 0],[511, 144, 0],[514, 158, 0],[525, 176, 0],[524, 176, 0],[516, 173, 0],[514, 176, 0],[528, 198, 0],[525, 198, 0],[522, 197, 0],[555, 257, 0],[587, 302, 0],[623, 334, 0],[650, 340, 0],[664, 336, 0],[672, 319, 0],[670, 295, 0],[650, 262, 0],[615, 219, 0],[554, 150, 0],[528, 115, 0],[513, 85, 0],[510, 63, 0],[524, 28, 0],[546, -6, 0],[559, -47, 0]],
      [[849, 148, 0],[855, 172, 0],[852, 200, 0],[839, 229, 0],[822, 243, 0],[798, 240, 0],[768, 225, 0],[741, 217, 0],[718, 220, 0],[701, 231, 0],[693, 249, 0],[696, 261, 0],[715, 267, 0],[731, 257, 0],[731, 234, 0],[709, 196, 0],[683, 173, 0],[659, 164, 0],[628, 170, 0],[602, 184, 0],[576, 206, 0],[559, 234, 0],[548, 246, 0],[535, 251, 0],[527, 258, 0],[525, 269, 0],[527, 278, 0],[527, 272, 0],[529, 261, 0],[538, 259, 0],[542, 265, 0],[542, 271, 0],[538, 275, 0],[532, 273, 0],[526, 266, 0],[531, 260, 0],[540, 259, 0],[543, 265, 0],[542, 273, 0],[535, 280, 0],[529, 283, 0],[520, 286, 0],[520, 288, 0],[522, 292, 0],[527, 281, 0],[523, 277, 0],[518, 277, 0],[516, 281, 0],[516, 286, 0],[520, 292, 0],[506, 287, 0],[499, 277, 0],[500, 265, 0],[503, 258, 0],[508, 258, 0],[512, 266, 0],[514, 271, 0],[514, 274, 0],[509, 270, 0],[509, 264, 0],[507, 257, 0],[500, 252, 0],[499, 243, 0],[506, 231, 0],[543, 188, 0],[557, 158, 0],[559, 124, 0],[549, 95, 0],[531, 74, 0],[516, 47, 0],[518, 21, 0],[535, 0, 0],[562, -17, 0],[575, -34, 0]]
    ]


    pos = pos || [0, 0, 0]
    // pos[1] -= 2;

    this.eyes = [[534, 270, 0],[509, 271, 0]]
    this.offsetEyes = [0,0, -.2]

    this.remapVertices();

  }

  remapVertices(){
    let minX = 10000;
    let maxX = 0;

    let minY = 10000;
    let maxY = 0;

    for (var i = 0; i < this.lines.length; i++) {
      let l = this.lines[i]
      for (var k = 0; k < l.length; k++) {
        let v = l[k];
        if(v[0] < minX) minX = v[0]
        if(v[0] > maxX) maxX = v[0]

        if(v[1] < minY) minY = v[1]
        if(v[1] > maxY) maxY = v[1]
      }
    }

    this.wX = maxX - minX;
    this.wY = maxY - minY;
    let w = Math.max(this.wX, this.wY)

    this.tick = 0;

    let xMin = null;
    let xMax = null;
    let yMin = null;
    let yMax = null;
    let zMin = null;
    let zMax = null;

    for (var i = 0; i < this.eyes.length; i++) {
      this.eyes[i][0] /= (w/4);
			this.eyes[i][1] /= (w/4);
			this.eyes[i][2] = this.offsetEyes[2];
      // console.log(this.eyes[i]);
    }

    for (var i = 0; i < this.lines.length; i++) {
      let l = this.lines[i]

      for (var k = 0; k < l.length; k++) {

			  this.tick++;

  			l[k][0] /= (w/4);
  			l[k][1] /= (w/4);
  			l[k][2] = Math.cos(this.tick/6) * .2;


        if(l[k][0] < xMin || xMin === null) xMin = l[k][0];
        if(l[k][0] > xMax || xMax === null) xMax = l[k][0];

        if(l[k][1] < yMin || yMin === null) yMin = l[k][1];
        if(l[k][1] > yMax || yMax === null) yMax = l[k][1];

        if(l[k][2] < zMin || zMin === null) zMin = l[k][2];
        if(l[k][2] > zMax || zMax === null) zMax = l[k][2];
  		}
    }


    this.centerX = (xMax + xMin) /2;
    this.centerY = (yMax + yMin) /2;
    this.centerZ = (zMax + zMin) /2;

    var translation = [
      .2,-3,0
    ]

    this.translationAnchor = [
      -this.centerX,
      -this.centerY,
      -this.centerZ
    ]


    this.m = mat4.create();
    this.mTAnchor = mat4.create();
    this.mT = mat4.create();

    mat4.identity(this.mTAnchor, this.mTAnchor);
    mat4.translate(this.mTAnchor, this.mTAnchor, this.translationAnchor);
    mat4.translate(this.mT, this.mT, translation);




    mat4.identity(this.m);
    mat4.multiply(this.m, this.m, this.mT);
    mat4.multiply(this.m, this.m, this.mTAnchor);



    for (var i = 0; i < this.lines.length; i++) {
      let l = this.lines[i];

      for (var k = 0; k < l.length; k++) {
        let vect = [];
        let vect2 = [];
        vect[0] = l[k][0];
        vect[1] = l[k][1];
        vect[2] = l[k][2];

        vec3.transformMat4(l[k], l[k], this.m);
        // verts.push(vect2);
      }
    }

    for (var i = 0; i < this.eyes.length; i++) {
      // let vect = [];
      // let vect2 = [];
      // vect[0] = this.eyes[i][0];
      // vect[1] = this.eyes[i][1];
      // vect[2] = this.eyes[i][2];

      vec3.transformMat4(this.eyes[i], this.eyes[i], this.m);
    }



    this.finalLines = []
    for (var i = 0; i < this.lines.length; i++) {
      let l = this.lines[i];

      this.finalLines.push(this.getPoints(l));
    }

  }

  getPoints(pts){
    this.spline.points = pts;
    this.sub = 3;
    let index;

    var array = []
    for (let i = 0; i < pts.length * this.sub; i ++ ) {
			index = i / ( pts.length * this.sub );
      array.push(this.spline.getPoint( index ));
		}

    // this.totalPts = array;

    return array;
  }

}

export default Owl;
